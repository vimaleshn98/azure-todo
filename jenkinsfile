pipeline{
    agent any;
     tools{
       maven 'maven'
       jdk 'JDK11'
   }
    stages{
        stage("build"){
            steps{
                sh 'mvn clean'
                sh 'mvn -f app/pom.xml compile'
            }
            post{
                success{
                    echo "========Maven compile stage executed successfully========"
                }
                failure{
                    echo "========Maven compile stage execution failed========"
                }
            }
        }
    
     stage("Test"){
            steps{
                echo "Maven Test"
                sh 'mvn -f app/pom.xml -Dmaven.test.failure.ignore=true  test'
                
            }
            post{
                success{
                    echo "========Maven Test stage executed successfully========"
                     junit 'app/target/surefire-reports/*.xml'

                }
                failure{
                    echo "========Maven Test stage execution failed========"
                     junit 'app/target/surefire-reports/*.xml'
                }
            }
        }
       stage('sonar analysis'){
            agent any
            steps{
                withSonarQubeEnv('sonarcloud'){
                    echo 'Performing SonarQube Analysis'
                    sh 'mvn -f app/pom.xml package sonar:sonar'
                }
            }
            post{
                success{
                    echo "========Code Analysis stage executed successfully========"

                }
                failure{
                    echo "========Code Analysis stage execution failed========"
                }
            }
            
        }
        stage("Deployee"){
           when {
                expression {
                        currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
                steps{
     
                     rtUpload (
                         serverId: 'artifactory-server',
                     spec: """{
                             "files": [
                                      {
                                     "pattern": "/var/lib/jenkins/workspace/TodoApp@2/app/target/*.war",
                                     "target": "art-doc-dev-locs/${env.BUILD_NUMBER}/"
                                    }
                                ]
                            }"""
                        )
                    }
            post{
                success{
                    echo "========Deploying executed successfully========"

                }
                
                failure{
                    echo "========Deploying stage execution failed========"
                }
            }
        }    
        stage("Download"){
           when {
                expression {
                        currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
                steps{
                     
            rtDownload (
                         serverId: 'artifactory-server',
                     spec: """{
                             "files": [
                                      {
                                      "pattern": "art-doc-dev-locs/${env.BUILD_NUMBER}/*.war",
                                      "target": "app/"
                                    }
                                ]
                            }"""
                        )
                    }
            post{
                success{
                    echo "========Download executed successfully ========"
                    // sshagent(['ubuntu2']){
                    // sh 'scp -r bazinga/*.jar ubuntu@18.236.173.67:/home/ubuntu/artifacts'
                    }
                
                failure{
                    echo "========Download stage execution failed========"
                }
            }
        }

        
        stage('Docker build'){
            steps{
               
                    sh 'docker image prune -a --force'
                    sh 'docker-compose build'
                
                
            }
        }
        stage('Pushing images to docker hub'){
            steps{
                

                withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerHubPWD')]) {
                            // some block
                   sh "docker login -u 7349216534 -p ${dockerHubPWD}"

                }
                sh "docker commit cisample_app_1 7349216534/todo-app:v${env.BUILD_ID}"
                sh "docker push 7349216534/todo-app:v${env.BUILD_ID}"

            }
        }
        stage('deploying it to kubernetes'){
            steps{
                sh 'chmod +x change-tag.sh'
                sh """./change-tag.sh v${env.BUILD_ID}"""
                sh 'cat k8s/api-deployment.yaml'
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://content-jackal-k8s-656e8d92.hcp.westus2.azmk8s.io:443') {
                                // some block
                    sh 'kubectl apply -f k8s/database-deployment.yaml'
                    
                }
                sleep(120)
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://content-jackal-k8s-656e8d92.hcp.westus2.azmk8s.io:443') {
                                // some block
                    sh 'kubectl apply -f k8s/api-deployment.yaml'
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                    
                }

            }
        }
    

    }
}
